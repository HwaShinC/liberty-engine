#!/usr/bin/env node

'use strict';

const fs = require('fs');
const path = require('path');
const crypto = require('crypto');
const { promisify } = require('util');
const inquirer = require('inquirer');
const validator = require('validator');

const randomBytesAsync = promisify(crypto.randomBytes);
const writeFileAsync = promisify(fs.writeFile);

const configPath = path.join(__dirname, '..', 'config', 'config.json');
const rootPath = path.join(__dirname, '..');

const NGINX_MESSAGE = 'nginx (nginx must be installed first)';

const colors = require('colors/safe');

const nginxConfig = (host, viewRoot) => `server {
  listen 80 default_server;
  listen [::]:80 default_server;

  root ${viewRoot};

  index index.html;

  server_name ${host};

  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header X-Forwarded-Proto $scheme;

  location /api/ {
    proxy_pass http://localhost:3001/;
  }

  location / {
    try_files $uri $uri/ @rewrites;
  }

  location /media/ {
    root ${rootPath};
  }

  location @rewrites {
    rewrite ^(.+)$ /index.html last;
  }

  location ~* \\.(?:ico|css|js|gif|jpe?g|png)$ {
    expires max;
    add_header Pragma public;
    add_header Cache-Control "public, must-revalidate, proxy-revalidate";
  }

}`;

(async () => {
  try {
    if (fs.existsSync(configPath)) {
      const answers = await inquirer.prompt([
        {
          type: 'confirm',
          name: 'clear',
          message: 'config.json is found. Do you want clear the data of your wiki?',
          default: false,
        },
      ]);
      if (!answers.clear) {
        return;
      }
    }
    const answers = await inquirer.prompt([
      {
        type: 'input',
        name: 'wikiName',
        message: 'the name of wiki',
      },
      {
        type: 'input',
        name: 'dbName',
        message: 'database name',
      },
      {
        type: 'input',
        name: 'dbUsername',
        message: 'database username',
      },
      {
        type: 'password',
        name: 'dbPassword',
        message: 'database password',
      },
      {
        type: 'input',
        name: 'dbHost',
        message: 'database server host',
        default: 'localhost',
      },
      {
        type: 'input',
        name: 'dbPort',
        message: 'database server port',
        default: '3306',
        validate(value) {
          return validator.isInt(String(value), { min: 1, max: 65535 }) || 'Please enter a valid port number';
        },
        filter: Number,
      },
      {
        type: 'input',
        name: 'wikiDomain',
        message: 'Wiki server domain name',
        default: 'localhost',
      },
      {
        type: 'list',
        name: 'view',
        message: 'Pick a view skin',
        choices: [
          'liberty',
        ],
      },
      {
        type: 'list',
        name: 'serverType',
        message: 'Pick a HTTP server',
        choices: [
          NGINX_MESSAGE,
          'do nothing',
        ],
      },
      {
        type: 'input',
        name: 'adminUsername',
        message: 'Wiki admin username',
      },
      {
        type: 'password',
        name: 'adminPassword',
        message: 'Wiki admin password',
      },
      {
        type: 'input',
        name: 'frontPageName',
        message: 'Wiki front page',
      },
    ]);
    const secret = (await randomBytesAsync(48))
      .toString('base64')
      .replace(/\+/g, '-')
      .replace(/\//g, '_')
      .replace(/=/g, '');
    const config = {
      production: {
        secret,
        db: {
          username: answers.dbUsername,
          password: answers.dbPassword,
          database: answers.dbName,
          host: answers.dbHost,
          port: answers.dbPort,
          dialect: 'mysql',
          charset: 'utf8mb4',
          collate: 'utf8mb4_bin',
          pool: { max: 40, min: 0, idle: 10000 },
        },
        mediaFileStorage: {
          type: 'local',
        },
      },
      development: {
        secret,
        db: {
          username: answers.dbUsername,
          password: answers.dbPassword,
          database: answers.dbName,
          host: answers.dbHost,
          port: answers.dbPort,
          dialect: 'mysql',
          charset: 'utf8mb4',
          collate: 'utf8mb4_bin',
          pool: { max: 40, min: 0, idle: 10000 },
        },
        mediaFileStorage: {
          type: 'local',
        },
      },
    };
    const configJSON = JSON.stringify(config, null, 2);
    await writeFileAsync(configPath, configJSON);
    const models = require('../lib/models');
    await models.install({
      wikiName: answers.wikiName,
      domain: answers.domain,
      adminUsername: answers.adminUsername,
      adminPassword: answers.adminPassword,
      frontPageName: answers.frontPageName,
    });
    await models.initialize();
    const viewLiberty = require('liberty-view-liberty');
    if (answers.serverType === NGINX_MESSAGE) {
      const nginx = nginxConfig(answers.wikiDomain, viewLiberty.root);
      console.log(colors.green('Use below to configure Nginx.'));
      console.log(`\n${nginx}\n`);
    }
    console.log(colors.green('done'));
    process.exit(0);
  } catch (err) {
    console.log(err);
    process.exit(-1);
  }
})();
